import asyncio
import logging
import random
import array
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω—ã (—Ä–µ–∞–ª—å–Ω—ã–µ ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–π –∏—Ö –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ!)
BOT_TOKEN = "7697895116:AAGzzQYZt2AmJgaJnCUFgBbsG9QIVF6W904"
VT_API_KEY = "af8ae31b9e80e0bc5b3d1ccdc401ba4b02ea1bc34cc9aec245874d80864962c9"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
def pass_gen():
    MAX_LEN = 12
    DIGITS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    LOCASE_CHARACTERS = list('abcdefghijkmnopqrstuvwxyz')
    UPCASE_CHARACTERS = list('ABCDEFGHJKLMNPQRSTUVWXYZ')
    SYMBOLS = list('@#$%=:?./|~>*()<')

    COMBINED_LIST = DIGITS + UPCASE_CHARACTERS + LOCASE_CHARACTERS + SYMBOLS
    rand_digit = random.choice(DIGITS)
    rand_upper = random.choice(UPCASE_CHARACTERS)
    rand_lower = random.choice(LOCASE_CHARACTERS)
    rand_symbol = random.choice(SYMBOLS)
    temp_pass = rand_digit + rand_upper + rand_lower + rand_symbol

    for _ in range(MAX_LEN - 4):
        temp_pass += random.choice(COMBINED_LIST)
    temp_pass_list = array.array('u', temp_pass)
    random.shuffle(temp_pass_list)
    return "".join(temp_pass_list)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class LinkCheck(StatesGroup):
    waiting_for_url = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–µ—Ç–æ–¥–∏—á–∫–∞"), KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
)

# –ú–µ–Ω—é –º–µ—Ç–æ–¥–∏—á–∫–∏
method_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"), KeyboardButton(text="Microsoft Family Safety")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–æ–∫
back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–∑–∞–¥")]],
    resize_keyboard=True,
    input_field_placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥"
)

# /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
@dp.message(F.text.lower() == "—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
async def send_generated_password(message: Message):
    password = pass_gen()
    await message.answer(f"üîê –í–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:\n<code>{password}</code>")

# –ú–µ—Ç–æ–¥–∏—á–∫–∞
@dp.message(F.text.lower() == "–º–µ—Ç–æ–¥–∏—á–∫–∞")
async def show_method_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=method_keyboard
    )

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
@dp.message(F.text.lower() == "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def builtin_tools_info(message: Message):
    text = (
        "–û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Android –∏ Apple:\n"
        "–î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Android - https://clck.ru/3JSrNP\n"
        "–î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ Apple - https://clck.ru/3JSrAV"
    )
    await message.answer(text)

# Microsoft Family Safety
@dp.message(F.text.lower() == "microsoft family safety")
async def microsoft_family_info(message: Message):
    text = (
        "–û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ Microsoft Family Safety:\n"
        "https://clck.ru/3JSrue"
    )
    await message.answer(text)

# –ù–∞–∑–∞–¥ –∏–∑ –º–µ—Ç–æ–¥–∏—á–∫–∏
@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥")
async def go_back_to_main_menu(message: Message, state: FSMContext = None):
    if state:
        await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É"
@dp.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def ask_for_url(message: Message, state: FSMContext):
    await state.set_state(LinkCheck.waiting_for_url)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å.",
        reply_markup=back_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
@dp.message(LinkCheck.waiting_for_url)
async def scan_and_report_url(message: Message, state: FSMContext):
    url = message.text.strip()
    if url.lower() == "–Ω–∞–∑–∞–¥":
        return await go_back_to_main_menu(message, state)
    if not url.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http –∏–ª–∏ https.")
        return
    await message.answer("–°–∫–∞–Ω–∏—Ä—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ VirusTotal...")
    try:
        async with aiohttp.ClientSession() as session:
            scan_api = 'https://www.virustotal.com/vtapi/v2/url/scan'
            scan_data = {'apikey': VT_API_KEY, 'url': url}
            async with session.post(scan_api, data=scan_data) as scan_response:
                if scan_response.status != 200:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ URL –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                    await state.clear()
                    return
                scan_result = await scan_response.json()
                scan_id = scan_result.get("scan_id")
                if not scan_id:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å scan_id –æ—Ç VirusTotal.")
                    await state.clear()
                    return
            report_api = 'https://www.virustotal.com/vtapi/v2/url/report'
            report_params = {'apikey': VT_API_KEY, 'resource': url, 'scan': 1}
            await asyncio.sleep(5)
            async with session.get(report_api, params=report_params) as report_response:
                if report_response.status != 200:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –æ—Ç VirusTotal.")
                    await state.clear()
                    return
                report = await report_response.json()
                if report.get("response_code") == 1:
                    positives = report.get("positives", 0)
                    total = report.get("total", 1)
                    detection_rate = positives / total * 100 if total else 0
                    permalink = report.get("permalink", "")
                    text = (
                        f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n"
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: <b>{positives}</b>\n"
                        f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: <b>{total}</b>\n"
                        f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è: <b>{detection_rate:.2f}%</b>\n\n"
                        f"<a href='{permalink}'>–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ VirusTotal</a>"
                    )
                else:
                    text = (
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ URL.\n"
                        f"{report.get('verbose_msg', '')}"
                    )
                await message.answer(text)
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å VirusTotal.")
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
